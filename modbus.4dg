#platform "Gen4-uLCD-35DCT-CLB"
 /*
 * @file     modbus
 * @version     1.0
 * @date        2018.08.17
 * @author      Alejandro Mera
 * @contact     alejoseb@gmail.com, https://alejandromera.com
 * @credits original library     Samuel Marco i Armengol
 * @contact                      sammarcoarmengol@gmail.com
 *
 * @description
 *  Diablo16 library for communicating with Modbus devices
 *  over RS232/485 via RTU protocol.
 *
 *
 * @license
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; version
 *  2.1 of the License.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @defgroup setup Modbus Object Instantiation/Initialization
 * @defgroup loop Modbus Object Management
 * @defgroup buffer Modbus Buffer Management
 * @defgroup discrete Modbus Function Codes for Discrete Coils/Inputs
 * @defgroup register Modbus Function Codes for Holding/Input Registers
 *
 */

#platform "Gen4-uLCD-35DCT-CLB"

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"

#inherit "modbusConst.inc"
#inherit "modbus_lib.fnc"

#inherit "KBROUTINES.inc"
#inherit "ledDigitsDisplay.inc"



func  main()
    var  reply;
//  var hstrings ; // Handle to access uSD strings, uncomment if required
//  var hFontx ;   // Handle to access uSD fonts, uncomment if required and change n to font number
//  Uncomment the following if uSD images, fonts or strings used.

    ModbusInit(0);


    touch_Set(TOUCH_ENABLE);
    gfx_Set(SCREEN_MODE,PORTRAIT) ;
    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif
//    gfx_TransparentColour(0x0020);    // uncomment if transparency required
//    gfx_Transparency(ON);             // uncomment if transparency required

//  hFontn := file_LoadImageControl("modbus.dan", "modbus.gcn", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
//  hstrings := file_Open("modbus.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
    hndl := file_LoadImageControl("modbus.dat", "modbus.gci", 1);


    gfx_Cls();
    reply := Form1();


endfunc


func Form1()
    var _state, _n, _returnValue,x, state, numx;
    var telegram1[SIZE_TELEGRAM];   //telegrams contains information for each Modbus query
    var telegram2[SIZE_TELEGRAM];
    var telegram3[SIZE_TELEGRAM];
    var telegram4[SIZE_TELEGRAM];
    var u8state;
    var poolError:=0;
    var exception;

    numx:=0; // auxiliar variable to test holding register writing
    u8state:=0;
    //telegram for reading temperatures
    telegram1[u8id]:= SLAVE_ADDRESS; // slave address
    telegram1[u8fct] := MB_FC_READ_REGISTERS; // function code
    telegram1[u16RegAdd] := BASE_RHOLD + T_1A_RAW ; // start address in slave
    telegram1[u16CoilsNo] := 4; //number of elements (coils or registers) to read
    telegram1[au16reg]:= au16data; // pointer to a memory array

    //telegram for writing a coil
    telegram2[u8id]:= SLAVE_ADDRESS; // slave address
    telegram2[u8fct] := MB_FC_WRITE_COIL; // function code
    telegram2[u16RegAdd] := BASE_COILS + T_1A_OK; // start address in slave
    telegram2[u16CoilsNo] := 1; //number of elements (coils or registers) to read
    telegram2[au16reg]:= au16Coils; // pointer to a memory array


    //telegram for Writing a holding register
    telegram3[u8id]:= SLAVE_ADDRESS; // slave address
    telegram3[u8fct] := MB_FC_WRITE_REGISTER; // function code
    telegram3[u16RegAdd] := BASE_RHOLD + T_1B_RAW ; // start address in slave
    telegram3[u16CoilsNo] := 1; //number of elements (coils or registers) to read
    telegram3[au16reg]:= au16data; // pointer to a memory array


    gfx_Cls();   //clean screen

    img_SetAttributes(hndl, Form1, I_TOUCH_DISABLE);


    // Statictext1 1.0 generated 8/17/2018 2:54:08 AM
    img_Show(hndl,iStatictext1) ;


    // StatictextTemp1 1.0 generated 7/22/2018 4:56:09 PM
    img_Show(hndl,iStatictextTemp1) ;
    img_SetAttributes(hndl, iStatictextTemp1, I_TOUCH_DISABLE); // this is required for any widget that does not require touch events
    img_Show(hndl,iStatictextTemp2) ;
    img_SetAttributes(hndl, iStatictextTemp2, I_TOUCH_DISABLE);
    img_Show(hndl,iStatictextTemp3) ;
    img_SetAttributes(hndl, iStatictextTemp3, I_TOUCH_DISABLE);
    img_Show(hndl,iStatictextTemp4) ;
    img_SetAttributes(hndl, iStatictextTemp4, I_TOUCH_DISABLE);

// LeddigitsTemp1 1.0 generated 7/22/2018 4:57:13 PM
    img_Show(hndl, iLeddigitsTemp1);  // show all digits at 0, only do this once
    img_SetAttributes(hndl, iLeddigitsTemp1, I_TOUCH_DISABLE);
    img_Show(hndl, iLeddigitsTemp2);  // show all digits at 0, only do this once
    img_SetAttributes(hndl, iLeddigitsTemp2, I_TOUCH_DISABLE);
    img_Show(hndl, iLeddigitsTemp3);  // show all digits at 0, only do this once
    img_SetAttributes(hndl, iLeddigitsTemp3, I_TOUCH_DISABLE);
    img_Show(hndl, iLeddigitsTemp4);  // show all digits at 0, only do this once
    img_SetAttributes(hndl, iLeddigitsTemp4, I_TOUCH_DISABLE);


    // Winbutton1 1.0 generated 8/17/2018 2:50:15 AM
    img_ClearAttributes(hndl, iWinbutton1, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(hndl, iWinbutton1);  // show button, only do this once
    img_SetWord(hndl, iWinbutton1, IMAGE_INDEX, state); // where state is 0 for up and 1 for down
    img_Show(hndl,iWinbutton1) ;


    // Winbutton2 1.0 generated 8/17/2018 2:50:28 AM
    img_ClearAttributes(hndl, iWinbutton2, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(hndl, iWinbutton2);  // show button, only do this once
    img_SetWord(hndl, iWinbutton2, IMAGE_INDEX, state); // where state is 0 for up and 1 for down
    img_Show(hndl,iWinbutton2) ;


    // Winbutton3 1.0 generated 8/17/2018 2:50:38 AM
    img_ClearAttributes(hndl, iWinbutton3, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(hndl, iWinbutton3);  // show button, only do this once
    img_SetWord(hndl, iWinbutton3, IMAGE_INDEX, state); // where state is 0 for up and 1 for down
    img_Show(hndl,iWinbutton3) ;


    repeat
            _state := touch_Get(TOUCH_STATUS);               // get touchscreen status
            _n := img_Touched(hndl,-1) ;

            if(_state == TOUCH_PRESSED)


                if( _n== iWinbutton1)  //write holding register
                      while(Modu8state != COM_IDLE )
                            ModPoll();
                      wend
                      numx:=numx+1;
                      au16data[0]:=numx;
                      u8state:=4;    //jump to state 4

                endif

                if( _n== iWinbutton2)  //write coil ON
                      while(Modu8state != COM_IDLE )
                            ModPoll();
                      wend
                      au16Coils[0]:=1;  // 1 ON , 0 OFF
                      u8state:=3;     //jump to state 3

                endif

                if( _n== iWinbutton3)  //write holding register
                      while(Modu8state != COM_IDLE )
                            ModPoll();
                      wend
                      au16Coils[0]:=0;
                      u8state:=3;   //jump to state 3

                endif


            endif

             //modbus machine state


       u8state := ModbusClientPoll();
       if(u8state > 6)
            ledDigitsDisplay(au16data[0], iLeddigitsTemp1+1, 28, 4, 2, 25, 1) ;
            ledDigitsDisplay(au16data[1], iLeddigitsTemp2+1, 28, 4, 2, 25, 1) ;
            ledDigitsDisplay(au16data[2], iLeddigitsTemp3+1, 202, 4, 2, 25, 1) ;
            ledDigitsDisplay(au16data[3], iLeddigitsTemp4+1, 202, 4, 2, 25, 1) ;
       endif
                    /*
       switch(u8state)

        case 0:
            if(sys_GetTimer(TIMER3)==0)
                u8state++;
            endif
            break;
        case 1:
            //ModQuery(telegram1);
            u8state++;
            break;
        case 2:
//            exception:= ModPoll();  // checks for response from slave
            if(Modu8state==COM_IDLE)  //verify modbus communication state COM_IDLE means that response was received
              u8state:=0;
              if (exception>0) // if there is no exception on response, then update screen with data from Modbus slave

              ledDigitsDisplay(au16data[0], iLeddigitsTemp1+1, 28, 4, 2, 25, 1) ;
              ledDigitsDisplay(au16data[1], iLeddigitsTemp2+1, 28, 4, 2, 25, 1) ;
              ledDigitsDisplay(au16data[2], iLeddigitsTemp3+1, 202, 4, 2, 25, 1) ;
              ledDigitsDisplay(au16data[3], iLeddigitsTemp4+1, 202, 4, 2, 25, 1) ;

              endif
              sys_SetTimer(TIMER3,MOD_POOL_T);
            endif
            break;
        case 3:
            //ModQuery(telegram2); //writing coil
            u8state:=5;
            break;
        case 4:
            //ModQuery(telegram3); //writing holding register
            u8state:=5;
            break;
        case 5:
            exception:=ModPoll();
            if(Modu8state==COM_IDLE)  //verify modbus communication state COM_IDLE means that response was received
                 u8state:=0;
                 sys_SetTimer(TIMER3,MOD_POOL_T);
            endif
            break;

       endswitch
       */
    forever

exit:

   img_SetAttributes(hndl, Form1, I_TOUCH_DISABLE);
   return  _returnValue;

endfunc





